#!/bin/sh

. /lib/netifd/netifd-proto.sh

ipcalc_line() {
	local line="$1"
	local v="${line%|*}"
	local IP="${v##*|}"
	local NETMASK="${line##*|}"
	ipcalc.sh $IP $NETMASK
	echo NODEID="${line%%|*}"
}

ipcalc_for_route_each_line() {
	local ROUTECONF="$1"
	local FILTER="$2"
	local FUNC="$3"
	cat $ROUTECONF|grep $FILTER|while read line; do
			eval $(ipcalc_line $line|sed 's/^/local /')
			$FUNC $NODEID $@
	done
}

find_same_network_item() {
	local SNET="$5"
	local DNET="$6"
	if [ "$NODEID|$NETWORK|$PREFIX" = "$SNET" ]; then
			echo "$DNET|$IP"
	fi
}

find_route_network_item() {
	local NODEID="$1"
	local ROUTECONF="$2"
	local SNET="$6"
	if [ "$NETWORK|$PREFIX" != "$SNET" ]; then
			ipcalc_for_route_each_line $ROUTECONF "^$NODEID|" find_same_network_item "$NODEID|$SNET" "$NETWORK|$PREFIX"
	fi
}

gnb_routes() {
	local item="$1"
	eval $(ipcalc_line "$item"|sed 's/^/local /g')
	ipcalc_for_route_each_line $ROUTECONF "-v $NODEID" find_route_network_item "$NETWORK|$PREFIX"
}

proto_add_gnb_ipv4_routes() {
	local NODEID="$1"
	local IPADDR="$2"
	local NETMASK="$3"
	local v=""
	for route in $(gnb_routes "$NODEID|$IPADDR|$NETMASK"); do
			v="${route#*|}"
			proto_add_ipv4_route "${route%%|*}" "${v%|*}" "${route##*|}"
	done
}

proto_init_update "$IFACE" 1
proto_add_ipv4_address "$IPADDR" "$NETMASK"
proto_add_gnb_ipv4_routes "$NODEID" "$IPADDR" "$NETMASK"
proto_send_update "$CONFIG"
