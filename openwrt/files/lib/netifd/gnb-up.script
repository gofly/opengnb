#!/bin/sh

. /lib/netifd/netifd-proto.sh

ipcalc_line() {
	local line="$1"
	local tmp="${line%|*}"
	local ip="${tmp##*|}"
	local netmask="${line##*|}"
	ipcalc.sh $ip $netmask
	echo NODEID="${line%%|*}"
}

ipcalc_for_route_each_line() {
	local route_conf="$1"
	local filter="$2"
	local func="$3"
	cat $route_conf|grep $filter|while read line; do
			eval $(ipcalc_line $line|sed 's/^/local /')
			$func $NODEID $@
	done
}

find_same_network_item() {
	local snet="$5"
	local dnet="$6"
	if [ "$NODEID|$NETWORK|$PREFIX" = "$snet" ]; then
			echo "$dnet|$IP"
	fi
}

find_route_network_item() {
	local node_id="$1"
	local route_conf="$2"
	local snet="$6"
	if [ "$NETWORK|$PREFIX" != "$snet" ]; then
			ipcalc_for_route_each_line $route_conf "^$node_id|" find_same_network_item "$node_id|$snet" "$NETWORK|$PREFIX"
	fi
}

gnb_routes() {
	local line="$1"
	eval $(ipcalc_line "$line"|sed 's/^/local /g')
	ipcalc_for_route_each_line $ROUTECONF "-v $NODEID" find_route_network_item "$NETWORK|$PREFIX"
}

proto_add_gnb_ipv4_routes() {
	local NODEID="$1"
	local IPADDR="$2"
	local NETMASK="$3"
	local tmp=""
	for route in $(gnb_routes "$NODEID|$IPADDR|$NETMASK"); do
			tmp="${route#*|}"
			proto_add_ipv4_route "${route%%|*}" "${tmp%|*}" "${route##*|}"
	done
}

proto_init_update "$IFACE" 1
proto_add_ipv4_address "$IPADDR" "$NETMASK"
proto_add_gnb_ipv4_routes "$NODEID" "$IPADDR" "$NETMASK"
proto_send_update "$CONFIG"
